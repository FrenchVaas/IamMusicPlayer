buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "gradle.plugin.com.modrinth.minotaur:Minotaur:1.2.0"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: com.matthewprenger.cursegradle.CurseGradlePlugin
apply plugin: com.modrinth.minotaur.Minotaur
//def dest = "pre-${getDate()}"

version = "${mod_version}"

group = "${mod_group}"
archivesBaseName = "${mod_name}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: "${forge_mapping}"
//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run\\client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run\\server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run\\data')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'iammusicplayer', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }
    }
}

def getDate() {
    return new Date().format('yyyyMMddHHmm')
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven { url = "https://dvs1.progwml6.com/files/maven/" }//JEI
    maven { url = "https://modmaven.k-4u.nl" }//JEI
    maven { url "https://maven.felnull.dev/" }//OE
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
}
configurations {
    shadowAll
    compile.extendsFrom(shadowAll)
}
allprojects {
    repositories {
        maven { url = 'https://jitpack.io' }
        jcenter()
        mavenCentral()
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    compile fg.deobf("red.felnull:otyacraftengine:${oe_version}")
    shadowAll 'com.sedmelluq:lavaplayer:1.3.78'
    shadowAll 'org.apache.httpcomponents:httpclient:4.5.13'
    shadowAll 'dev.felnull:felnull-java-library:1.41'
    shadowAll 'com.github.sealedtx:java-youtube-downloader:3.0.2'
    implementation 'com.madgag:animated-gif-lib:1.4';
}
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'
shadowJar {
    classifier ''
    project.configurations.shadowAll.setTransitive(true);
    configurations = [project.configurations.shadowAll]
    relocate 'com.github.kiulian', 'red.felnull.imp.libs.com.github.kiulian'
    relocate 'org.slf4j', 'red.felnull.imp.libs.org.slf4j'
    relocate 'certificates', 'red.felnull.imp.libs.certificates'
    relocate 'com.fasterxml', 'red.felnull.imp.libs.com.fasterxml'
    relocate 'org.jsoup', 'red.felnull.imp.libs.org.jsoup'
    relocate 'natives', 'red.felnull.imp.libs.natives'
    relocate 'mozilla', 'red.felnull.imp.libs.mozilla'
    relocate 'net.iharder', 'red.felnull.imp.libs.net.iharder'
    relocate 'com.sedmelluq.lava', 'red.felnull.imp.libs.com.sedmelluq.lava'
    relocate 'org.apache.http', 'red.felnull.imp.libs.org.apache.http'
    relocate 'com.alibaba.fastjson', 'red.felnull.imp.libs.com.alibaba.fastjson'
    relocate 'dev.felnull.fnjl', 'red.felnull.imp.libs.dev.felnull.fnjl'
    relocate('org.apache.commons', 'dev.felnull.imp.libs.org.apache.commons') {
        include 'org.apache.commons.logging.**'
        include 'org.apache.commons.io.**'
        include 'org.apache.commons.codec.**'
    }
    relocate ('com.sedmelluq.discord.lavaplayer', 'dev.felnull.imp.libs.com.sedmelluq.discord.lavaplayer'){
        exclude  'com.sedmelluq.discord.lavaplayer.natives.**'
    }
}

afterEvaluate {
    reobf {
        shadowJar { mappings = tasks.reobfJar.mappings }
    }
}
ext.themanifest = {
    attributes([
            "Specification-Title"     : "${mod_name}",
            "Specification-Vendor"    : "${mod_vendor}",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "${mod_vendor}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}
jar {
    manifest themanifest
}
jar.finalizedBy('reobfJar')
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest themanifest
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
    manifest themanifest
}
artifacts {
    archives devJar
    archives sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'iammusicplayer'
            artifact jar
            pom {
                name = 'IamMusicPlayer'
                description = 'Music Player which supports Multiplayer.'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MORIMORI0317'
                        name = 'MORIMORI0317'
                    }
                    developer {
                        id = 'FelNull'
                        name = 'TeamFelNull'
                        email = 'teamfelnull@m.servg.red'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://maven.felnull.dev/"
            credentials {
                username = System.getenv('mavenname')
                password = System.getenv('mavenpassword')
            }
        }
    }
}

if (System.getenv('curesforgeapikey') != null && "${project.curesforge_id}" != '') {
    curseforge {
        apiKey = System.getenv('curesforgeapikey')
        project {
            id = "${project.curesforge_id}"
            changelog = ""
            releaseType = "${project.release_type}"
            addGameVersion "${project.mc_version}"
            project.support_versions.split(",").each {
                String version -> addGameVersion version
            }
            if ("${project.loader_type}" == 'Fabric')
                addGameVersion 'Fabric'

            if (JavaVersion.current().ordinal() + 1 >= 16)
                addGameVersion 'Java 16'

            mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${project.mod_version}.jar")) {
                displayName = "${project.mod_name}-${project.mc_version}-${project.mod_version}-${project.loader_type}"

                if ("${project.loader_type}" == 'Fabric' || "${project.required_mods}" != '' || "${project.optional_mods}" != '' || "${project.embedded_mods}" != '') {
                    relations {
                        if ("${project.loader_type}" == 'Fabric') {
                            requiredDependency 'fabric-api'
                            if ("${project.cloth_config_version}" != '')
                                requiredDependency 'cloth-config'
                        }

                        if ("${project.required_mods}" != '') {
                            project.required_mods.split(",").each {
                                String name -> requiredDependency name
                            }
                        }

                        if ("${project.optional_mods}" != '') {
                            project.optional_mods.split(",").each {
                                String name -> optionalDependency name
                            }
                        }

                        if ("${project.embedded_mods}" != '') {
                            project.embedded_mods.split(",").each {
                                String name -> embeddedLibrary name
                            }
                        }
                    }
                }
            }

            addArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${project.mod_version}-dev.jar")) {
                displayName = "${project.mod_name}-${project.mc_version}-${project.mod_version}-${project.loader_type}-dev"
            }
            addArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${project.mod_version}-source.jar")) {
                displayName = "${project.mod_name}-${project.mc_version}-${project.mod_version}-${project.loader_type}-source"
            }
        }
    }
}

if (System.getenv('modrinthapikey') != null && "${modrinth_id}" != '') {
    task publishModrinth(type: com.modrinth.minotaur.TaskModrinthUpload) {

        token = System.getenv('modrinthapikey')
        projectId = "${project.modrinth_id}"
        versionName = "${project.mod_name}-${project.mc_version}-${project.mod_version}-${project.loader_type}"
        versionNumber = "${project.mc_version}-${project.mod_version}-${project.loader_type}"
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${project.mod_version}.jar")
        versionType = "${project.release_type}".toUpperCase()
        addGameVersion("${project.mc_version}")
        addLoader("${project.loader_type}".toLowerCase())
        project.support_versions.split(",").each {
            String version -> addGameVersion version
        }
    }
}