buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//def dest = "pre-${getDate()}"

version = "${mod_version}"

group = "${mod_group}"
archivesBaseName = "${mod_name}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: "${forge_mapping}"
//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run\\client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run\\server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run\\data')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'iammusicplayer', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                iammusicplayer {
                    source sourceSets.main
                }
            }
        }
    }
}

def getDate() {
    return new Date().format('yyyyMMddHHmm')
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven { url = "https://dvs1.progwml6.com/files/maven/" }//JEI
    maven { url = "https://modmaven.k-4u.nl" }//JEI
    maven { url "https://maven.latmod.com/" }//FGL
    maven { url "https://maven.felnull.dev/" }//OE
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
}
configurations {
    shadowAll
    compile.extendsFrom(shadowAll)
}
allprojects {
    repositories {
        maven { url = 'https://jitpack.io' }
        jcenter()
    }
}
dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    compile fg.deobf("com.feed_the_beast.mods:ftb-gui-library:${fgl_version}")
    compile fg.deobf("red.felnull:otyacraftengine:${oe_version}")
    shadowAll 'com.sedmelluq:lavaplayer:1.3.75'
    shadowAll 'org.apache.httpcomponents:httpclient:4.5.13'
    shadowAll 'dev.felnull:felnull-java-library:1.8'
    shadowAll 'com.github.sealedtx:java-youtube-downloader:2.4.3'
    implementation 'com.madgag:animated-gif-lib:1.4';
}
tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'
shadowJar {
    classifier ''
    project.configurations.shadowAll.setTransitive(true);
    configurations = [project.configurations.shadowAll]
    relocate 'com.github.kiulian', 'red.felnull.imp.libs.com.github.kiulian'
    relocate 'org.slf4j', 'red.felnull.imp.libs.org.slf4j'
    relocate 'certificates', 'red.felnull.imp.libs.certificates'
    relocate 'com.fasterxml', 'red.felnull.imp.libs.com.fasterxml'
    relocate 'org.jsoup', 'red.felnull.imp.libs.org.jsoup'
    relocate 'natives', 'red.felnull.imp.libs.natives'
    relocate 'mozilla', 'red.felnull.imp.libs.mozilla'
    relocate 'net.iharder', 'red.felnull.imp.libs.net.iharder'
    relocate 'com.sedmelluq.lava', 'red.felnull.imp.libs.com.sedmelluq.lava'
    relocate 'org.apache.http', 'red.felnull.imp.libs.org.apache.http'
    relocate 'com.alibaba.fastjson', 'red.felnull.imp.libs.com.alibaba.fastjson'
    relocate 'dev.felnull.fnjl', 'red.felnull.imp.libs.dev.felnull.fnjl'
    relocate 'org.apache.commons.codec', 'red.felnull.imp.libs.org.apache.commons.codec'
    relocate 'org.apache.commons.logging', 'red.felnull.imp.libs.org.apache.commons.logging'
    relocate 'org.apache.commons.io', 'red.felnull.imp.libs.org.apache.commons.io'
}

afterEvaluate {
    reobf {
        shadowJar { mappings = tasks.reobfJar.mappings }
    }
}
ext.themanifest = {
    attributes([
            "Specification-Title"     : "${mod_name}",
            "Specification-Vendor"    : "${mod_vendor}",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${version}",
            "Implementation-Vendor"   : "${mod_vendor}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}
jar {
    manifest themanifest
}
jar.finalizedBy('reobfJar')
task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    manifest themanifest
}
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
    manifest themanifest
}
artifacts {
    archives devJar
    archives sourceJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact devJar
            artifact sourceJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
